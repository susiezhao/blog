{"data":{"site":{"siteMetadata":{"title":"Blog","author":"susiezhao"}},"markdownRemark":{"id":"a9526b66-727d-57e0-989a-b5cfe357a308","excerpt":"基于数据劫持的双向数据绑定 常见的基于数据劫持的双向数据绑定的实现方式：ES5提供的   和ES6提供的   。基于数据劫持的双向数据绑定的优势在于：1、无需显式调用；2、可精确得知变化数据。 Object.defineProperty…","html":"<h2>基于数据劫持的双向数据绑定</h2>\n<p>常见的基于数据劫持的双向数据绑定的实现方式：ES5提供的 <code class=\"language-text\">Object.defineProperty</code> 和ES6提供的 <code class=\"language-text\">Proxy</code> 。基于数据劫持的双向数据绑定的优势在于：1、无需显式调用；2、可精确得知变化数据。</p>\n<h3>Object.defineProperty</h3>\n<p><code class=\"language-text\">Object.defineProperty()</code> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回这个对象。<br>\n用法：<code class=\"language-text\">Object.defineProperty(obj, prop, descriptor)</code></p>\n<ul>\n<li><code class=\"language-text\">obj</code>: 要在其上定义属性的对象 </li>\n<li><code class=\"language-text\">prop</code>: 要定义或修改的属性名称</li>\n<li><code class=\"language-text\">descriptor</code>: 将被定义或修改的属性描述符</li>\n</ul>\n<h4>属性描述符</h4>\n<p>对象里目前存在的属性描述符有两种主要形式：数据描述符和存取描述符。数据描述符是一个具有值的属性，该值可能是可写的也可能是不可写的；存取描述符是由getter-setter函数对描述的属性。<code class=\"language-text\">descriptor</code> 必须是这两种形式之一，不能同时是两者。</p>\n<p>数据描述符和存取描述符公有的属性：</p>\n<ul>\n<li><code class=\"language-text\">configurable</code>: 当且仅当该属性值为true时，该属性描述符才能够被修改，同时该属性也能从对应的对象上被删除。默认值为false；在对象上直接定义的属性，该特性默认值为true；</li>\n<li><code class=\"language-text\">enumerable</code>: 当且仅当该属性值为true时，该属性才能出现在对象的枚举属性中。默认值为false；在对象上直接定义的属性，该特性默认值为true；</li>\n</ul>\n<p>数据描述符独有的属性：</p>\n<ul>\n<li><code class=\"language-text\">writable</code>: 当且仅当该属性值为true时，<code class=\"language-text\">value</code> 才能被赋值运算符修改。默认值为false；在对象上直接定义的属性，该特性默认值为true；</li>\n<li><code class=\"language-text\">value</code>: 该属性对应的值。默认值为undefined；</li>\n</ul>\n<p>存取描述符独有的属性：</p>\n<ul>\n<li><code class=\"language-text\">get</code>: 给属性提供 getter 方法，在读取属性时调用的方法。默认值为undefined；</li>\n<li><code class=\"language-text\">set</code>: 给属性提供 setter 方法，在写入属性时调用的函数。默认值为undefined</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>调用 <code class=\"language-text\">Object.defineProperty()</code> 方法创建一个新属性时，如果不指定，则 <code class=\"language-text\">configurable</code> <code class=\"language-text\">writable</code> <code class=\"language-text\">enumerable</code> 特性的默认值都是 false。</li>\n<li>当试图改变不可配置属性（除了<code class=\"language-text\">value</code> 和 <code class=\"language-text\">writable</code> 属性之外，且 <code class=\"language-text\">writable</code> 属性值只能改为 false ）的值时会抛出TypeError。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">get</span> <span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">set</span> <span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">get</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getter:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">set</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'setter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> descriptor_a <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: 1, configurable: true, enumerable: true, writable: true }</span>\n<span class=\"token keyword\">var</span> descriptor_b <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: undefined, configurable: false, enumerable: false, writable: false }</span>\n<span class=\"token keyword\">var</span> descriptor_c <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { configurable: false, enumerable: false, get: f, set: f }</span>\n<span class=\"token keyword\">var</span> descriptor_d <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { configurable: true, enumerable: true, get: f, set: f }</span></code></pre></div>\n<h4>数据劫持</h4>\n<p><code class=\"language-text\">Object.defineProperty()</code> 主要利用存取属性描述符中的 <code class=\"language-text\">get</code> 和 <code class=\"language-text\">set</code> 属性来实现劫持一个对象的属性，在对象属性发生变化时进行特定的操作。数据劫持的应用例子如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Observer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">observe</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> type <span class=\"token operator\">=</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Object 类型</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'[object Object]'</span> <span class=\"token operator\">||</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'[object Array]'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">observeObject</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'[object Array]'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">observeArrayPreparation</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">observeObject</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// for...in 可以遍历对象实力属性和原型属性</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> prop <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> _path <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      _path<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">get</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">set</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> newValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>_path<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          value <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 递归</span>\n      <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> _path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">observeArrayPreparation</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> _props <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'push'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pop'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'unshift'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'shift'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'splice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sort'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'reverse'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 改变原数组的操作</span>\n    <span class=\"token keyword\">var</span> _newProto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _props<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prop</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>_newProto<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">value</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">var</span> _path <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          _path<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> _newProto<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  c<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    d<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    e<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  c<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Observer</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">path<span class=\"token punctuation\">,</span> newVle<span class=\"token punctuation\">,</span> oldVle</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`path: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>path<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, newValue: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>newVle<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, oldValue: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>oldVle<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Observer</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">path<span class=\"token punctuation\">,</span> newVle<span class=\"token punctuation\">,</span> oldVle</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`path: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>path<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, newValue: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>newVle<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, oldValue: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>oldVle<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">Object.defineProperty()</code> 用作数据劫持时存在如下缺陷：</p>\n<ul>\n<li>监听情况只限于对象属性的修改，如果对对象属性的增删，此时不是进行数据劫持；</li>\n<li>该方法本身无法对数组对象进行监听，通过上述自定义数组对象进行处理后，数组中新增加的元素的修改仍然无法监听；</li>\n</ul>\n<h3>Proxy</h3>\n<p>ES6提供了Proxy构造函数，用来生成一个Proxy实例。其在目标对象之前架设一层拦截，外界对该对象的访问，都必须通过这层拦截，因此Proxy提供了一种机制，可以对外界的访问进行过滤和改写。Proxy可以使用 <code class=\"language-text\">get</code> 和 <code class=\"language-text\">set</code> 来拦截对象属性的访问，<code class=\"language-text\">apply</code> 拦截函数的调用等多达13中拦截操作。<br>\n用法：<code class=\"language-text\">var proxy = new Proxy(target, handler);</code></p>\n<ul>\n<li><code class=\"language-text\">target</code>: 表示所要拦截的目标对象，可以是JavaScript 中任何合法的对象；</li>\n<li><code class=\"language-text\">handler</code>: handler参数也是一个对象，用来定制拦截行为；</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">get</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> receiver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`getting </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">set</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> receiver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`setting </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// setting count!</span>\n<span class=\"token operator\">++</span>obj<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// getting count!</span>\n<span class=\"token comment\">// setting count!</span>\n<span class=\"token comment\">// 2</span></code></pre></div>\n<h3>数据劫持</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/* maps observable propertires to a Set of observer functions, which use the property */\nvar observers = new WeakMap();\n\n// contains the triggered observer functions, which should run soon\nvar queuedObservers = new Set();\n\n// points to the currently running observer function, can be undefined\nvar currentObserver;\n\n/*\n*transforms an object into an observable by wrapping it into a proxy,\n* it also adds a blank Map for property-observer pairs to be saved later\n*/\nfunction observable(obj) {\n  observers.set(obj, new Map());\n  return new Proxy(obj, { get, set });\n}\n\n// the exposed observe function, which defined which property of the object to be observed\nfunction observe(fn) {\n  queueObserver(fn);\n}\n\nfunction get(target, key, receiver) {\n  const result = Reflect.get(target, key, receiver);\n  if (currentObserver) {\n    registerObserver(target, key, currentObserver);\n    if (typeof result === &#39;object&#39;) {\n      const observableResult = observable(result);\n      Reflect.set(target, key, observableResult, receiver);\n      return observableResult;\n    }\n  }\n  return result;\n}\n\nfunction registerObserver(target, key, observer) {\n  let observersForKey = observers.get(target).get(key);\n  if (!observersForKey) {\n    observersForKey = new Set();\n    observers.get(target).set(key, observersForKey);\n  }\n  observersForKey.add(observer);\n}\n\nfunction set(target, key, value, receiver) {\n  const observersForKey = observers.get(target).get(key);\n  if (observersForKey) {\n    observersForKey.forEach(queueObserver);\n  }\n  return Reflect.set(target, key, value, receiver);\n}\n\n/*\n*Queued observers run asynchronously in one batch, which results in superior performance. During *registration, the observers are synchronously added to the queuedObservers Set. A Set cannot contain *duplicates, so enqueuing the same observer multiple times won&#39;t result in multiple executions.\n*/\nfunction queueObserver(observer) {\n  if (queuedObservers.size === 0) {\n    Promise.resolve().then(runObservers);\n  }\n  queuedObservers.add(observer);\n}\n// execute the observe functions in batch\nfunction runObservers() {\n  try {\n    queuedObservers.forEach((observer) =&gt; {\n      currentObserver = observer;\n      observer();\n    });\n  } finally {\n    currentObserver = undefined;\n    queuedObservers.clear();\n  }\n}\n\n// Test example\nvar obj = {\n  a: 1,\n  b: {\n    c: 1,\n    d: [1, 2],\n  },\n  e: [1, 2, 3]\n};\nvar proxy = observable(obj);\nfunction print() {\n  console.log(`监听属性发生变化:\\n a: ${proxy.a}\\n b: b.c:${proxy.b.c}, b.d:${proxy.b.d}\\n e: ${proxy.e}`, );\n}\n\nobserve(print);</code></pre></div>\n<h1>优点 &#x26;&#x26; 缺点</h1>\n<p>优点：Proxy 用于数据劫持是支持对象的扩展属性的数据劫持，因为 Proxy 是按照单个对象定义数据劫持的，所以对象动态添加的属性可以被数据劫持；而 ES5 提供的 Object。defineProperty 在进行数据劫持时是不支持扩展属性的劫持的，其每个属性的 get 和 set 的拦截操作都是必须预先定义才能实现拦截。例如 Object.defineProperty 对于数组的数据劫持必须通过重定义数组的方法才能实现，其本身是无法直接支持数组的劫持的；而 Proxy 本身直接支持数组的劫持；  </p>\n<p>缺点: Proxy 的浏览器的支持不全，且不能通过 polyfill 实现；而 Object.defineProperty 的浏览器支持性很好，基本上主流的浏览器全部实现支持了。</p>","frontmatter":{"title":"Proxy VS Object.defineProperty","date":"April 06, 2019","description":"基于 Proxy 和 Object.defineProperty 两种方式的数据劫持原理分析."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/data-binding/proxy_Object.definedProperty/","previous":{"fields":{"slug":"/hello-world/"},"frontmatter":{"title":"Hello World"}},"next":null}}